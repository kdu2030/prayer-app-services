using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using PrayerAppServices.Files.Entities;
using PrayerAppServices.PrayerGroups.Entities;
using PrayerAppServices.Users.Entities;


namespace PrayerAppServices.Data {
    public class AppDbContext(DbContextOptions<AppDbContext> options) : IdentityDbContext<AppUser, IdentityRole<int>, int>(options) {
        public DbSet<MediaFile> MediaFiles { get; set; }
        public DbSet<PrayerGroup> PrayerGroups { get; set; }

        public DbSet<PrayerGroupUser> PrayerGroupUsers { get; set; }

        private readonly string[] IdentityTableNames = ["AspNetUsers", "AspNetUserTokens", "AspNetUserLogins", "AspNetUserClaims", "AspNetRoles", "AspNetUserRoles", "AspNetRoleClaims"];

        protected override void OnModelCreating(ModelBuilder modelBuilder) {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<PrayerGroup>()
                .HasAlternateKey(group => group.GroupName);

            // This converts tables generated by ASP.NET Identity to snake_case
            // Cannot be done by UseSnakeCaseNamingConvention()
            IEnumerable<IMutableEntityType> entityTypes = modelBuilder.Model.GetEntityTypes();
            foreach (IMutableEntityType entityType in entityTypes) {
                string? tableName = entityType.GetTableName();

                if (tableName == null) {
                    continue;
                }

                if (IdentityTableNames.Contains(tableName)) {
                    entityType.SetTableName(GetSnakeCase(tableName));
                }

            }

            modelBuilder.Entity<PrayerGroup>()
                .HasOne(group => group.ImageFile)
                .WithMany(file => file.PrayerGroups)
                .HasForeignKey(group => group.ImageFileId);

            modelBuilder.Entity<PrayerGroup>()
                .HasOne(group => group.BannerImageFile)
                .WithMany(file => file.BannerPrayerGroups)
                .HasForeignKey(group => group.BannerImageFileId);
        }


        private string GetSnakeCase(string name) {
            return string.Concat(name.Select((x, i) => i > 0 && char.IsUpper(x) ? "_" + x.ToString() : x.ToString())).ToLower();
        }

    }
}
